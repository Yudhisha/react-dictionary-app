{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\RN\\\\word-hunt\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport Container from '@mui/material/Container';\nimport Header from './components/Header/Header';\nimport Definitions from './components/Definitions/Definitions';\nimport { alpha, styled } from '@mui/material/styles';\nimport { grey } from '@mui/material/colors';\nimport Switch from '@mui/material/Switch';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [word, setWord] = useState(\"\");\n  const [meanings, setMeanings] = useState([]);\n  const [category, setCategory] = useState(\"en\");\n  const [LightMode, setLightMode] = useState(\"false\");\n  const DarkMode = styled(Switch)(_ref => {\n    let {\n      theme\n    } = _ref;\n    return {\n      '& .MuiSwitch-switchBase.Mui-checked': {\n        color: grey[600],\n        '&:hover': {\n          backgroundColor: alpha(grey[600], theme.palette.action.hoverOpacity)\n        }\n      },\n      '& .MuiSwitch-switchBase.Mui-checked + .MuiSwitch-track': {\n        backgroundColor: grey[600]\n      }\n    };\n  });\n  const label = {\n    inputProps: {\n      'aria-label': 'Switch demo'\n    }\n  };\n\n  const fetchDictionaryAPI = async () => {\n    try {\n      const data = await axios.get(`https://api.dictionaryapi.dev/api/v2/entries/${category}/${word}`);\n      setMeanings(data.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchDictionaryAPI();\n  }, [word, category]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      height: \"100vh\",\n      backgroundColor: LightMode ? \"#fff\" : \"#282c34\",\n      color: LightMode ? \"black\" : \"white\",\n      tran\n    },\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"100vh\",\n        justifyContent: \"space-evenly\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 0,\n          right: 15,\n          paddingTop: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [LightMode ? \"Dark\" : \"Light\", \" Mode\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DarkMode, {\n          checked: LightMode,\n          onChange: () => setLightMode(!LightMode)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Header, {\n        category: category,\n        setCategory: setCategory,\n        word: word,\n        setWord: setWord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), meanings && /*#__PURE__*/_jsxDEV(Definitions, {\n        word: word,\n        meanings: meanings,\n        category: category\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"x+BijMPxxt23bjb2wEk0+E+0UZw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/admin/Desktop/RN/word-hunt/src/App.js"],"names":["axios","useEffect","useState","Container","Header","Definitions","alpha","styled","grey","Switch","App","word","setWord","meanings","setMeanings","category","setCategory","LightMode","setLightMode","DarkMode","theme","color","backgroundColor","palette","action","hoverOpacity","label","inputProps","fetchDictionaryAPI","data","get","error","console","log","height","tran","display","flexDirection","justifyContent","position","top","right","paddingTop"],"mappings":"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","sourcesContent":["import './App.css';\nimport axios from 'axios';\nimport {useEffect, useState} from 'react';\nimport Container from '@mui/material/Container';\nimport Header from './components/Header/Header';\nimport Definitions from './components/Definitions/Definitions';\nimport { alpha, styled } from '@mui/material/styles';\nimport { grey } from '@mui/material/colors';\nimport Switch from '@mui/material/Switch';\n\nfunction App() {\n  const [word, setWord] = useState(\"\")\n  const [meanings, setMeanings] = useState([]);\n  const [category, setCategory] = useState(\"en\");\n  const [LightMode, setLightMode] = useState(\"false\");\n\n  const DarkMode = styled(Switch)(({ theme }) => ({\n    '& .MuiSwitch-switchBase.Mui-checked': {\n      color: grey[600],\n      '&:hover': {\n        backgroundColor: alpha(grey[600], theme.palette.action.hoverOpacity),\n      },\n    },\n    '& .MuiSwitch-switchBase.Mui-checked + .MuiSwitch-track': {\n      backgroundColor: grey[600],\n    },\n  }));\n  \n  const label = { inputProps: { 'aria-label': 'Switch demo' } };\n\n  const fetchDictionaryAPI = async() => {\n    try{\n      const data = await axios.get(`https://api.dictionaryapi.dev/api/v2/entries/${category}/${word}`);\n      setMeanings(data.data);\n    }catch(error){\n      console.log(error);\n    }\n  }\n\n\n  useEffect(() => {\n    fetchDictionaryAPI();\n  }, [word,category])\n\n  return (\n    <div className=\"App\" style={{height:\"100vh\", backgroundColor: LightMode ? \"#fff\" : \"#282c34\", color: LightMode ? \"black\" : \"white\", tran}}>\n      <Container maxWidth=\"md\" style={{display:\"flex\",flexDirection:\"column\",height:\"100vh\",justifyContent:\"space-evenly\"}}>\n        <div style={{position:\"absolute\",top:0,right:15,paddingTop:10}}>\n          <span>{LightMode ? \"Dark\" : \"Light\"} Mode</span>\n          <DarkMode checked={LightMode} onChange={()=>setLightMode(!LightMode)}/>\n        </div>\n        <Header category={category} setCategory={setCategory} word={word} setWord={setWord}/>\n        {meanings && (<Definitions word={word} meanings={meanings} category={category}/>) }\n      </Container>\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}